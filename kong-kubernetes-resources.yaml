# DEPLOYMENT and CONTAINER
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kong
    team: plattformsikkerhet
  name: kong
  namespace: king
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8001"
        prometheus.io/scrape: "true"
      labels:
        app: kong
      namespace: king
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KONG_PG_PORT
              value: "5432"
            - name: KONG_PG_HOST
              value: postgres.king.svc.nais.local
          command: [ "/bin/sh", "-c", "until nc -zv $KONG_PG_HOST $KONG_PG_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
        - name: kong-migration-up
          image: kong
          imagePullPolicy: IfNotPresent
          env:
            - name: KONG_PG_PASSWORD
              value: kong
            - name: KONG_PG_HOST
              value: postgres.king.svc.nais.local
            - name: KONG_NGINX_WORKER_PROCESSES
              value: "1"
          command: [ "/bin/sh", "-c", "kong migrations bootstrap" ]
      containers:
        - name: kong
          image: ybel/kong-test:10
          # docker build -t kong_nodb . && docker tag kong_nodb ybel/kong-test:9 && docker push ybel/kong-test:9
          # image: docker.pkg.github.com/navikt/kong/kong:2020.04.03-998b913
          livenessProbe:
            exec:
              command:
                - kong
                - health
            failureThreshold: 15
            periodSeconds: 5
            timeoutSeconds: 2
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: http-admin
            - containerPort: 8443
              name: https
            - containerPort: 8444
          env:
            - name: KONG_PREFIX
              value: /usr/local/kong
            # Logging
            - name: KONG_LOG_LEVEL
              value: info
            - name: KONG_ADMIN_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_ADMIN_ERROR_LOG
              value: /dev/stderr
            - name: KONG_PROXY_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_PROXY_ERROR_LOG
              value: /dev/stderr
            # Listen
            - name: KONG_ADMIN_LISTEN
              value: 0.0.0.0:8001, 0.0.0.0:8444 ssl
            # Database
            #- name: KONG_DATABASE
            #  value: "off"
            #- name: KONG_DECLARATIVE_CONFIG
            #  value: kong.yaml
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_PG_DATABASE
              value: kong
            - name: KONG_PG_HOST
              value: postgres.king.svc.nais.local
            - name: KONG_PG_USER
              value: kong
            - name: KONG_PG_PASSWORD
              value: kong
            - name: KONG_PG_PORT
              value: "5432"
            - name: KONG_PG_SSL
              value: "off"
            # Caching
            - name: KONG_MEM_CACHE_SIZE
              value: "512m"
            # Plugins
            - name: KONG_PLUGINS
              value: bundled,correlation-id,syslog,jwt,rate-limiting,3rd-party-oauth,ip-restriction
            # Error type
            - name: KONG_ERROR_DEFAULT_TYPE
              value: application/json
          volumeMounts:
            - name: ca-bundle-pem
              mountPath: /etc/pki/tls/certs/
      volumes:
        - name: ca-bundle-pem
          configMap:
            name: ca-bundle-pem
            items:
              - key: ca-bundle.pem
                path: ca-bundle.crt
      restartPolicy: Always
# https://github.com/Kong/kong-dist-kubernetes/blob/master/kong-control-plane-postgres.yaml
---
# KONG-SERVICE
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kong
    team: plattformsikkerhet
  name: kong
  namespace: king
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: http-admin
      port: 8001
      targetPort: http-admin
    - name: https
      port: 8443
      targetPort: https
    - name: "8444"
      port: 8444
      targetPort: 8444
  selector:
    app: kong
  sessionAffinity: None
  type: ClusterIP
---
# INGRESS
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    prometheus.io/path: /metric
    prometheus.io/scrape: "true"
  labels:
    app: kong
    team: plattformsikkerhet
  name: kong
  namespace: king
spec:
  rules:
    - host: kong.nais.preprod.local
      http:
        paths:
          - backend:
              serviceName: kong
              servicePort: 80
            path: /
# Deploy config
# minikube kubectl apply -- -f <path-to-file>

# Clean up
# minikube kubectl delete deploy/kong
# minikube kubectl delete svc/konga-service

# Manuelt create namespace
# minikube kubectl create namespace <insert-namespace-name-here>

# Default namespace
# minikube kubectl config set-context -- --current --namespace=king

# Port-forward
# minikube kubectl expose deployment kong -- --target-port=8001 --type=NodePort
# minikube kubectl port-forward svc/kong 8000

# minikube kubectl create configmap kong-proxy -- --from-file=proxy_health_check.conf=/Users/m151886/IdeaProjects/kong/kong-health-check.yaml
# minikube kubectl create configmap kong-proxy -- --from-env-file=/Users/m151886/IdeaProjects/kong/kong-health-check.yaml
